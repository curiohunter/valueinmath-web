{
  "meta": {
    "instanceId": "valuein-academy-migration"
  },
  "nodes": [
    {
      "parameters": {},
      "id": "workflow-trigger",
      "name": "Manual Trigger",
      "type": "n8n-nodes-base.manualTrigger",
      "typeVersion": 1,
      "position": [
        120,
        300
      ]
    },
    {
      "parameters": {
        "authentication": "serviceAccount",
        "resource": "sheet",
        "operation": "read",
        "documentId": "YOUR_GOOGLE_SHEET_ID",
        "sheetName": "시트1",
        "range": "A:G",
        "options": {
          "headerRow": true
        }
      },
      "id": "google-sheets-read",
      "name": "Google Sheets - Read Test Data",
      "type": "n8n-nodes-base.googleSheets",
      "typeVersion": 4,
      "position": [
        320,
        300
      ]
    },
    {
      "parameters": {
        "jsCode": "const processedData = [];\\n\\nfor (const item of $input.all()) {\\n  const rowData = item.json;\\n  \\n  if (!rowData.date || !rowData.name) {\\n    console.log('Skipping row due to missing date or name:', rowData);\\n    continue;\\n  }\\n  \\n  let formattedDate;\\n  try {\\n    if (typeof rowData.date === 'string') {\\n      const dateStr = rowData.date.replace(/\\\\//g, '-');\\n      const parsedDate = new Date(dateStr);\\n      \\n      if (isNaN(parsedDate.getTime())) {\\n        console.log('Invalid date format:', rowData.date);\\n        continue;\\n      }\\n      \\n      formattedDate = parsedDate.toISOString().split('T')[0];\\n    } else {\\n      formattedDate = new Date(rowData.date).toISOString().split('T')[0];\\n    }\\n  } catch (error) {\\n    console.log('Date parsing error for:', rowData.date, error);\\n    continue;\\n  }\\n  \\n  const testTypeMap = {\\n    '과정총괄테스트': '과정총괄테스트',\\n    '내용암기테스트': '내용암기테스트',\\n    '단원테스트': '단원테스트',\\n    '모의고사': '모의고사',\\n    '서술형평가': '서술형평가',\\n    '수학경시대회': '수학경시대회',\\n    '오답테스트': '오답테스트',\\n    '내신기출유사': '내신기출유사',\\n    '내신기출': '내신기출',\\n    '학교시험점수': '학교시험점수'\\n  };\\n  \\n  const mappedTestType = testTypeMap[rowData.test_type] || '단원테스트';\\n  \\n  processedData.push({\\n    original_data: rowData,\\n    date: formattedDate,\\n    student_name: rowData.name ? rowData.name.trim() : null,\\n    test_type: mappedTestType,\\n    test: rowData.test || null,\\n    test_score: rowData.test_score ? parseFloat(rowData.test_score) : null,\\n    note: rowData['비고'] || null,\\n    teacher_name: rowData['담당교사'] ? rowData['담당교사'].trim() : null\\n  });\\n}\\n\\nconsole.log('Processed', processedData.length, 'rows');\\nreturn processedData;"
      },
      "id": "data-transform",
      "name": "Transform Data",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        520,
        300
      ]
    },
    {
      "parameters": {
        "resource": "database",
        "operation": "executeQuery",
        "query": "SELECT id, name FROM students WHERE name ILIKE '%{{ $json.student_name }}%' LIMIT 1"
      },
      "id": "lookup-student",
      "name": "Lookup Student ID",
      "type": "n8n-nodes-base.supabase",
      "typeVersion": 1,
      "position": [
        720,
        300
      ]
    },
    {
      "parameters": {
        "resource": "database",
        "operation": "executeQuery",
        "query": "SELECT c.id as class_id FROM classes c\nJOIN employees e ON c.teacher_id = e.id\nWHERE e.name ILIKE '%{{ $json.teacher_name }}%'\nLIMIT 1"
      },
      "id": "lookup-class",
      "name": "Lookup Class ID",
      "type": "n8n-nodes-base.supabase",
      "typeVersion": 1,
      "position": [
        920,
        300
      ]
    },
    {
      "parameters": {
        "jsCode": "const transformedItem = $('Transform Data').item.json;\\nconst studentResult = $('Lookup Student ID').item.json;\\nconst classResult = $('Lookup Class ID').item.json;\\n\\nconst studentId = studentResult && studentResult.length > 0 ? studentResult[0].id : null;\\nif (!studentId) {\\n  console.log('Student not found:', transformedItem.student_name);\\n  return {\\n    error: 'Student not found: ' + transformedItem.student_name,\\n    skip: true\\n  };\\n}\\n\\nconst classId = classResult && classResult.length > 0 ? classResult[0].class_id : null;\\nif (!classId && transformedItem.teacher_name) {\\n  console.log('Class not found for teacher:', transformedItem.teacher_name);\\n}\\n\\nreturn {\\n  date: transformedItem.date,\\n  student_id: studentId,\\n  class_id: classId,\\n  test_type: transformedItem.test_type,\\n  test: transformedItem.test,\\n  test_score: transformedItem.test_score,\\n  note: transformedItem.note,\\n  skip: false,\\n  original_student_name: transformedItem.student_name,\\n  original_teacher_name: transformedItem.teacher_name\\n};"
      },
      "id": "merge-results",
      "name": "Merge Lookup Results",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1120,
        300
      ]
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "id": "skip-condition",
              "leftValue": "={{ $json.skip }}",
              "rightValue": false,
              "operator": {
                "type": "boolean",
                "operation": "equals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "filter-valid-records",
      "name": "Filter Valid Records",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [
        1320,
        300
      ]
    },
    {
      "parameters": {
        "resource": "database",
        "operation": "insert",
        "table": "test_logs",
        "fieldsUi": {
          "fieldValues": [
            {
              "fieldId": "date",
              "fieldValue": "={{ $json.date }}"
            },
            {
              "fieldId": "student_id",
              "fieldValue": "={{ $json.student_id }}"
            },
            {
              "fieldId": "class_id",
              "fieldValue": "={{ $json.class_id }}"
            },
            {
              "fieldId": "test_type",
              "fieldValue": "={{ $json.test_type }}"
            },
            {
              "fieldId": "test",
              "fieldValue": "={{ $json.test }}"
            },
            {
              "fieldId": "test_score",
              "fieldValue": "={{ $json.test_score }}"
            },
            {
              "fieldId": "note",
              "fieldValue": "={{ $json.note }}"
            }
          ]
        },
        "options": {
          "upsert": false
        }
      },
      "id": "insert-test-log",
      "name": "Insert Test Log",
      "type": "n8n-nodes-base.supabase",
      "typeVersion": 1,
      "position": [
        1520,
        300
      ]
    },
    {
      "parameters": {
        "jsCode": "const errorItem = $json;\\nconsole.log('Skipped record:', errorItem);\\n\\nreturn {\\n  error_log: errorItem.error,\\n  original_data: errorItem\\n};"
      },
      "id": "error-handler",
      "name": "Handle Errors",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1320,
        500
      ]
    },
    {
      "parameters": {
        "jsCode": "const allItems = $input.all();\\nconst successCount = allItems.filter(item => !item.json.error).length;\\nconst errorCount = allItems.filter(item => item.json.error).length;\\n\\nconsole.log('Migration completed:', successCount, 'success,', errorCount, 'errors');\\n\\nreturn {\\n  summary: {\\n    total_processed: allItems.length,\\n    successful_inserts: successCount,\\n    errors: errorCount,\\n    timestamp: new Date().toISOString()\\n  }\\n};"
      },
      "id": "summary",
      "name": "Migration Summary",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1720,
        400
      ]
    }
  ],
  "connections": {
    "Manual Trigger": {
      "main": [
        [
          {
            "node": "Google Sheets - Read Test Data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Google Sheets - Read Test Data": {
      "main": [
        [
          {
            "node": "Transform Data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Transform Data": {
      "main": [
        [
          {
            "node": "Lookup Student ID",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Lookup Student ID": {
      "main": [
        [
          {
            "node": "Lookup Class ID",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Lookup Class ID": {
      "main": [
        [
          {
            "node": "Merge Lookup Results",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Merge Lookup Results": {
      "main": [
        [
          {
            "node": "Filter Valid Records",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Filter Valid Records": {
      "main": [
        [
          {
            "node": "Insert Test Log",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Handle Errors",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Insert Test Log": {
      "main": [
        [
          {
            "node": "Migration Summary",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Handle Errors": {
      "main": [
        [
          {
            "node": "Migration Summary",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "pinData": {},
  "settings": {
    "executionOrder": "v1"
  },
  "staticData": null,
  "tags": [
    {
      "createdAt": "2024-06-28T09:00:00.000Z",
      "updatedAt": "2024-06-28T09:00:00.000Z",
      "id": "migration-tag",
      "name": "data-migration"
    }
  ],
  "triggerCount": 0,
  "updatedAt": "2024-06-28T09:00:00.000Z",
  "versionId": "test-logs-migration-v1"
}